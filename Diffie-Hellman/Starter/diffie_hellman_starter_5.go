package main

import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/sha1"
	"encoding/hex"
	"fmt"
	"math/big"
)

func is_pkcs7_padded(message []byte) bool {
	padding := message[len(message)-1]
	for i := len(message) - 1; i >= len(message)-int(padding); i-- {
		if message[i] != padding {
			return false
		}
	}
	return true
}

func unpad(message []byte) []byte {
	padding := message[len(message)-1]
	return message[:len(message)-int(padding)]
}

func decrypt_flag(shared_secret *big.Int, ivstr, ciphertext string) string {
	// Derive AES key from shared secret
	key_arr := sha1.Sum([]byte(shared_secret.String()))
	key := key_arr[:16]

	// Decrypt Flag
	ct, _ := hex.DecodeString(ciphertext)
	iv, _ := hex.DecodeString(ivstr)
	cblock, _ := aes.NewCipher(key)
	c := cipher.NewCBCDecrypter(cblock, iv)
	pt := make([]byte, len(ct))
	c.CryptBlocks(pt, ct)

	if is_pkcs7_padded(pt) {
		return string(unpad(pt))
	}
	return string(pt)
}

func main() {
	p, _ := new(big.Int).SetString("2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919", 10)
	A, _ := new(big.Int).SetString("112218739139542908880564359534373424013016249772931962692237907571990334483528877513809272625610512061159061737608547288558662879685086684299624481742865016924065000555267977830144740364467977206555914781236397216033805882207640219686011643468275165718132888489024688846101943642459655423609111976363316080620471928236879737944217503462265615774774318986375878440978819238346077908864116156831874695817477772477121232820827728424890845769152726027520772901423784", 10)
	b, _ := new(big.Int).SetString("197395083814907028991785772714920885908249341925650951555219049411298436217190605190824934787336279228785809783531814507661385111220639329358048196339626065676869119737979175531770768861808581110311903548567424039264485661330995221907803300824165469977099494284722831845653985392791480264712091293580274947132480402319812110462641143884577706335859190668240694680261160210609506891842793868297672619625924001403035676872189455767944077542198064499486164431451944", 10)

	k := new(big.Int).Exp(A, b, p)

	payload := map[string]string{
		"iv":             "737561146ff8194f45290f5766ed6aba",
		"encrypted_flag": "39c99bf2f0c14678d6a5416faef954b5893c316fc3c48622ba1fd6a9fe85f3dc72a29c394cf4bc8aff6a7b21cae8e12c",
	}

	fmt.Println(decrypt_flag(k, payload["iv"], payload["encrypted_flag"]))
}
